/**
 * Scrape news data, parse, and insert into database.
 */

var express = require('express')
	, request = require('request')
	, mongo = require('mongodb')
	, md5 = require('MD5')
	, cheerio = require('cheerio')
	, moment = require('moment')
	, async = require('async');

	var uristring =
		process.env.MONGOLAB_URI ||
		process.env.MONGOHQ_URL ||
		'mongodb://heroku_app23495772:6dv4rti8nij007hn89t0strkba@ds035557.mongolab.com:35557/heroku_app23495772';

	var newsDB
		, articleCollection
		, topicsCollection;

exports.google = function(req, res) {
	var timeInterval = setInterval(processTopics, .3 * 60 * 1000);

	function processTopics() {
		var url = 'http://news.google.com'
			, topics = [];
		// json.timestamp = moment()._d;

		async.waterfall([

			//----- WATERFALL 1 - build array of related article objects -----
			function(callback){
				console.log("******** WATERFALL 1 ********");
				request(url, function(err, resp, body) {
					if (err) {
						throw err;
					}
					$ = cheerio.load(body);
					var stories = $('.story');
					console.log('******** STORIES DOT LENGTH IS ', stories.length + " ********");
					var remainingStories = stories.length;

					// Iterate through each story
					$('.story').each(function() {
						var articles = [];
						var titleCheck = $(this).find('.story .esc-lead-article-title-wrapper a.article .titletext').text();
						if (titleCheck.length) {
							var article = {};
							// Main Article
							article.title = titleCheck;
							article.href = $(this).find('.story .esc-lead-article-title-wrapper a.article').attr('url');
							article.source = $(this).find('.story .esc-lead-article-source-wrapper .al-attribution-source').text();
							articles.push(article);
							// Related Articles
							$(this).find('.story .esc-extension-wrapper .esc-secondary-article-wrapper').each(function() {
								var relatedTitle  = $(this).find('.esc-secondary-article-title-wrapper a.article .titletext').text();
								if (relatedTitle.length) {
									article = {};
									article.title = relatedTitle;
									article.href = $(this).find('.esc-secondary-article-title-wrapper a.article').attr('href');
									article.source = $(this).find('.esc-secondary-article-title-wrapper .esc-secondary-article-source').text();
									articles.push(article);
								}
							});
						};

						if (articles.length) {
						 	topics.push(articles);
						}

						remainingStories--;
						console.log('******** remainingStories are', remainingStories + " ********");
						if (remainingStories === 0) {
							console.log("********** WATERFALL 1 COMPLETED ********");
							callback(null, topics);
						}
					});
				});
			}, //----- END WATERFALL 1 -----

			//----- WATERFALL 2 - Check if href exists in database -----
			function(topics, callback){
				console.log("******** WATERFALL 2 ********");
				connectToDb(function() {
				   async.each(topics, function(subArray, callback1) {
				      async.eachSeries(subArray, function(theCurrentArticle, callback2) {
				         checkHREFS(theCurrentArticle, function(thisArticle) {
					         if (thisArticle === undefined) {
					        		console.log("******** Set article exists: FALSE ********");


					        	// 	if (subArray.existingTopic) {
						        // 		connectToDb(function(){
				         	// 			articlesToDB(subArray);
				     					// });
					        	// 	} else {
						        // 		connectToDb(function(){
				         	// 			articlesToDB(subArray);
				     					// });
					        	// 	}


					        		console.log('callback 1');
							      callback2();
					          	// return callback2(new Error('Recipe not found'));
					         } else {
					        		console.log("******** Set article exists: TRUE ********");
					        		// break out of async series and set existingTopic true
					        		// thisArticle.existingArticle = true;

					        		// if (!subArray.existingTopic) {
					        		// 	subArray.push({existingTopic: true});
					        		// }
					        		
					        		// console.log("SUBARRAY", subArray);
					        		console.log('callback 2');
					        		callback2();
					         }
				      	});
				   	}, callback1);
					}, function(err) {
				   if (err) {
				      return console.error(err);
				   }
				   	console.log('******** FINISHED PROCESSING TOPICS ********');
						console.log("******** WATERFALL 2 COMPLETED ********");			
						callback(null, topics);
				    	// success, all recipes found
				  	});
				});
			}, //----- END WATERFALL 2 -----

			//----- WATERFALL 3 -----
			function(topics, callback){
				console.log("******** WATERFALL 3 COMPLETED ********");
				// console.log(topics);
				callback(null, 'done');
			} //----- END WATERFALL 3 -----

		], function (err, result) {
			//----- WATERFALL COMPLETE -----
			// result now equals 'done'

		});
	}
}










function connectToDb(done){
	if (newsDB === undefined) {
		mongo.connect(uristring, function (err, db) {
			if (err) {
				console.log ('******** ERROR connecting to: ' + uristring + '. ' + err + " ********");
			} else {
				console.log ('******** Succeeded connected to: ' + uristring + " ********");
				newsDB = db;
				articleCollection = newsDB.collection('articles');
				topicsCollection = newsDB.collection('topics');
				done();
			}
		});
	}  else {
 		console.log('******** ALREADY CONNECTED ********')
		return done();
	}
}


function articlesToDB(articles) {
	newsDB.createCollection('articles', function(err, collection) {});
	articleCollection.insert(articles, {continueOnError: true}, function(err, result) {
		if (err) {
			console.log('******** ARTICLES TO DB ERROR:' + err + " ********");
		} else {
			console.log('******** Succeeded inserted articles ********');
		}
	});
}


function topicsToDB(topics) {
	newsDB.createCollection('topics', function(err, collection) {});
	topicsCollection.insert(topics, {continueOnError: true}, function(err, result) {
		if (err) {
			console.log('******** TOPICS TO DB ERROR:' + err + " ********");
		} else {
			console.log('******** Succeeded inserted topics ********');
		}
	});
}


function checkHREFS(currentArticle, callback) {
	console.log("******** CHECKING HREF ********");
	theHREF = currentArticle.href;
	console.log("THE HREF IS: ", theHREF);
	articleCollection.findOne({
		'href': theHREF
	}, function (err, theArticle) {
		if (err) {
			 console.log('******** HREF CHECK ERROR:' + err + ' ********');
			 return callback();
		} else if (!theArticle) {
			console.log('******** Did not find Article ********');
			 return callback();
		} else {
			 console.log('******** Found Article ********');
			 console.log('the article i found is', theArticle);
			 return callback(theArticle);
		}
	});
}

